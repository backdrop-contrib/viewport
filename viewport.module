<?php
/**
 * @file
 * Set a viewport metatag with custom settings for a selected set of paths.
 */

/**
 * Viewport help page content.
 */
function viewport_help_content() {
  $help_text = t('<p>The Viewport module is a simple module that allows
    administrators, or users with the "Administer Viewport Settings" permission,
    to set a Viewport HTML metatag with the desired properties for one or several
    pages that can be configured from the Settings page of the module.</p>
    <p>
    The aim of the module is to provide an easy way to debug or test websites or
    apps, as well as responsive designs on smartphones and tablets. This is *NOT* a
    complete suite of tools to work with when delivering this kind of design / apps,
    but a small utility to help with one specific aspect of responsive design.</p>
    <p>
    Sometimes, one may need to set specific viewport values for a specific page on
    the site (e.g when embedding a game for smartphones / tablets). This tool
    helps to chase easily situations like that.</p>
    <p><strong>For more information on the viewport metatag and its
    properties, check the following resources: </strong></p>');

  $resource_links = array(
    'items' => array(
      l(t('Safari developer docs'),
      'https://developer.apple.com/library/safari/#documentation/appleapplications/reference/SafariHTMLRef/Articles/MetaTags.html#//apple_ref/doc/uid/TP40008193-SW7',
      array(
        'attributes' => array('target' => '_blank'),
      )),
      l(t('Non-browser-specific information on viewport metatag'),
      'http://www.html-5.com/metatags/index.html#viewport-meta-tag',
      array(
        'attributes' => array('target' => '_blank'),
      )),
      l(t('Detailed browser comparison of the viewport properties'),
      'http://www.quirksmode.org/mobile/tableViewport.html',
      array(
        'attributes' => array('target' => '_blank'),
      )),
    ),
  );

  $help_text .= theme('item_list', $resource_links);

  return $help_text;
}

/**
 * Implements hook_permission().
 */
function viewport_permission() {
  return array(
    'administer viewport' => array(
      'title' => t('Administer Viewport Settings'),
      'description' => t('Configure viewport settings for a selected set of pages'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function viewport_menu() {
  $items = array();

  $items['admin/config/user-interface/viewport'] = array(
    'title' => 'Viewport Settings',
    'description' => 'Configure viewport settings for a selected set of pages.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('viewport_settings_form'),
    'access arguments' => array('administer viewport'),
    'file' => 'viewport.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/help/viewport'] = array(
    'access arguments' => array('administer viewport'),
    'page callback' => 'viewport_help_content',
    'title' => 'Viewport Help Page',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_config_info().
 */
function viewport_config_info() {
  $prefixes['viewport.settings'] = array(
    'label' => t('Viewport settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_html_head_alter().
 */
function viewport_html_head_alter(&$vars) {
  $config = config('viewport.settings');
  // Check if the viewport tag needs to be present.
  if (viewport_path_is_selected()) {
    $settings = array(
      'width' => $config->get('viewport_width'),
      'height' => $config->get('viewport_height'),
      'initial-scale' => $config->get('viewport_initial_scale'),
      'minimum-scale' => $config->get('viewport_minimum_scale'),
      'maximum-scale' => $config->get('viewport_maximum_scale'),
      'user-scalable' => $config->get('viewport_user_scalable') ? 'yes' : 'no',
    );

    foreach ($settings as $key => $setting) {
      if (!empty($setting)) {
        $attributes[] = sprintf('%s=%s', $key, $setting);
      }
    }

    $content = implode(', ', $attributes);
    $vars['viewport']['#attributes']['content'] = $content;
  }
}

/**
 * Checks for a given path has been configured to display a viewport tag.
 *
 * @param string $path
 *   The path or alias of a page to be checked against the selected pages for
 *   the viewport.
 *
 * @return bool
 *   TRUE if the patch is present in the selected values, FALSE otherwise.
 */
function viewport_path_is_selected($path = NULL) {
  // Use the variable of $_GET['q'] as the default $path.
  if (is_null($path)) {
    $path = current_path();
  }
  $viewport_pages = config_get('viewport.settings', 'viewport_selected_pages');

  // Normalise the pages selected and the path looked for.
  $path_alias = backdrop_strtolower(backdrop_get_path_alias($path));
  $path = strtolower($path);
  $viewport_pages = strtolower($viewport_pages);

  // Page will match if current patch matches, or its alias (if any) matches.
  $page_match = backdrop_match_path($path, $viewport_pages);
  if (($path_alias != $path) && !$page_match) {
    $page_match = backdrop_match_path($path_alias, $viewport_pages);
  }

  return $page_match;
}
